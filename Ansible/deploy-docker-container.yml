---
- name: Deploy Docker container with Sample Web Application
  hosts: servers
  become: yes
  become_user: ec2-user  # Ensure that commands run as ec2-user
  tasks:
    - name: Check if Docker is installed (skip if already done)
      command: docker --version
      register: docker_installed
      ignore_errors: yes

    - name: Ensure /home/ec2-user/app directory exists
      file:
        path: /home/ec2-user/app
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'

    - name: Copy the web app files (including Dockerfile) to EC2
      ansible.builtin.synchronize:
        src: ../Docker/  # Path relative to the location of the playbook file
        dest: /home/ec2-user/app/
        mode: push
        recursive: yes  # Recursively copy the directory and its contents

    - name: Stop and remove the existing container
      docker_container:
        name: project-333-container
        state: absent  # Removes the container
      ignore_errors: yes  # In case the container doesn't exist

    - name: Build the Docker image for the web app
      docker_image:
        name: project-333
        source: build
        build:
          path: /home/ec2-user/app  # Path adjusted for ec2-user's home directory
        tag: latest
      when: docker_installed.rc == 0  # Proceed if Docker is installed

    - name: Run the Docker container from the built image
      docker_container:
        name: project-333-container
        image: project-333:latest
        state: started
        restart_policy: always
        published_ports:
          - "8080:80"  # Expose port 80 inside the container to port 8080 on the host
        volumes:
          - /home/ec2-user/app:/usr/share/nginx/html  # Mount the app directory to Nginx container directory
      when: docker_installed.rc == 0  # Proceed if Docker is installed

    - name: Run the Docker container with the new image
      docker_container:
        name: project-333-container
        image: project-333:latest
        state: started
        restart_policy: always
        published_ports:
          - "8080:80"
